op2=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op4=>operation: import sys
op6=>operation: import copy
op8=>operation: import re
op10=>operation: reg_x_length = 19
op12=>operation: reg_y_length = 22
op14=>operation: reg_z_length = 23
op16=>operation: reg_e_length = 17
op18=>operation: key_one = ''
op20=>operation: reg_x = []
op22=>operation: reg_y = []
op24=>operation: reg_z = []
op26=>operation: reg_e = []
st29=>start: start loading_registers
io31=>inputoutput: input: key
op34=>operation: i = 0
cond37=>condition: while (i < reg_x_length)
sub46=>subroutine: reg_x.insert(i, int(key[i]))
op48=>operation: i = (i + 1)
op52=>operation: j = 0
op54=>operation: p = reg_x_length
cond57=>condition: while (j < reg_y_length)
sub68=>subroutine: reg_y.insert(j, int(key[p]))
op70=>operation: p = (p + 1)
op72=>operation: j = (j + 1)
op76=>operation: k = (reg_y_length + reg_x_length)
op78=>operation: r = 0
cond81=>condition: while (r < reg_z_length)
sub92=>subroutine: reg_z.insert(r, int(key[k]))
op94=>operation: k = (k + 1)
op96=>operation: r = (r + 1)
op100=>operation: i = 0
cond103=>condition: while (i < reg_e_length)
sub112=>subroutine: reg_e.insert(i, int(key[i]))
op114=>operation: i = (i + 1)
e118=>end: end loading_registers
st122=>start: start set_key
io124=>inputoutput: input: key
cond128=>condition: if ((len(key) == 64) and re.match('^([01])+', key))
op132=>operation: key_one = key
sub134=>subroutine: loading_registers(key)
io139=>inputoutput: output:  True
e137=>end: end function return
io148=>inputoutput: output:  False
e146=>end: end function return

op2->op4
op4->op6
op6->op8
op8->op10
op10->op12
op12->op14
op14->op16
op16->op18
op18->op20
op20->op22
op22->op24
op24->op26
op26->st29
st29->io31
io31->op34
op34->cond37
cond37(yes)->sub46
sub46->op48
op48(left)->cond37
cond37(no)->op52
op52->op54
op54->cond57
cond57(yes)->sub68
sub68->op70
op70->op72
op72(left)->cond57
cond57(no)->op76
op76->op78
op78->cond81
cond81(yes)->sub92
sub92->op94
op94->op96
op96(left)->cond81
cond81(no)->op100
op100->cond103
cond103(yes)->sub112
sub112->op114
op114(left)->cond103
cond103(no)->e118
e118->st122
st122->io124
io124->cond128
cond128(yes)->op132
op132->sub134
sub134->io139
io139->e137
cond128(no)->io148
io148->e146

