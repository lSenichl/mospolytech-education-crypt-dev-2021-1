op2=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op4=>operation: alphavit = {'а': 0, 'б': 1, 'в': 2, 'г': 3, 'д': 4, 'е': 5, 'ё': 6, 'ж': 7, 'з': 8, 'и': 9, 'й': 10, 'к': 11, 'л': 12, 'м': 13, 'н': 14, 'о': 15, 'п': 16, 'р': 17, 'с': 18, 'т': 19, 'у': 20, 'ф': 21, 'х': 22, 'ц': 23, 'ч': 24, 'ш': 25, 'щ': 26, 'ъ': 27, 'ы': 28, 'ь': 29, 'э': 30, 'ю': 31, 'я': 32}
st7=>start: start ciphergostd
io9=>inputoutput: input: clearText
op12=>operation: array = []
op14=>operation: flag = False
cond17=>condition: for s in range(50, 1000)
cond68=>condition: for i in range(2, s)
cond86=>condition: if ((s % i) == 0)
op90=>operation: flag = True
sub92=>subroutine: break
cond100=>operation: array.append(s) if  (flag == False)
op110=>operation: flag = False
op114=>operation: p = 31
sub116=>subroutine: print('p = ', p)
op118=>operation: q = 5
sub120=>subroutine: print('q = ', q)
op122=>operation: a = 2
sub124=>subroutine: print('a =', a)
op126=>operation: array2 = []
op128=>operation: flag2 = False
cond131=>condition: for s in range(2, q)
cond182=>condition: for i in range(2, s)
cond200=>condition: if ((s % i) == 0)
op204=>operation: flag2 = True
sub206=>subroutine: break
cond214=>operation: array2.append(s) if  (flag2 == False)
op224=>operation: flag2 = False
op228=>operation: x = 3
sub230=>subroutine: print('x = ', x)
op232=>operation: y = ((a ** x) % p)
op234=>operation: k = 4
sub236=>subroutine: print('k = ', k)
op238=>operation: r = (((a ** k) % p) % q)
op240=>operation: msg = clearText
op242=>operation: msg_list = list(msg)
op244=>operation: alpha_code_msg = list()
cond247=>operation: alpha_code_msg.append(int(alphavit.get(msg_list[i]))) while  i in range(len(msg_list))
sub259=>subroutine: print('Длина исходного сообщения {} символов'.format(len(alpha_code_msg)))
op261=>operation: hash_code_msg = hash_value(p, alpha_code_msg)
sub263=>subroutine: print('Хэш сообщения:= {}'.format(hash_code_msg))
op265=>operation: s = (((x * r) + (k * hash_code_msg)) % q)
sub267=>subroutine: print('Цифровая подпись = ', (r % (2 ** 256)), ',', (s % (2 ** 256)))
op269=>operation: v = ((hash_code_msg ** (q - 2)) % q)
op271=>operation: z1 = ((s * v) % q)
op273=>operation: z2 = (((q - r) * v) % q)
op275=>operation: u = ((((a ** z1) * (y ** z2)) % p) % q)
sub277=>subroutine: print(r, ' = ', u)
cond280=>condition: if (u == r)
sub284=>subroutine: print('r = u, следовательно:')
sub286=>subroutine: print('Подпись верна\n')
e293=>end: end ciphergostd
st297=>start: start hash_value
io299=>inputoutput: input: n, alpha_code
op302=>operation: i = 0
op304=>operation: hash = 1
cond307=>condition: while (i < len(alpha_code))
op316=>operation: hash = ((((hash - 1) + int(alpha_code[i])) ** 2) % n)
op318=>operation: i += 1
io325=>inputoutput: output:  hash
e323=>end: end function return
sub290=>subroutine: print('Подпись неверна')

op2->op4
op4->st7
st7->io9
io9->op12
op12->op14
op14->cond17
cond17(yes)->cond68
cond68(yes)->cond86
cond86(yes)->op90
op90->sub92
cond86(no)->cond68
cond68(no)->cond100
cond100->op110
op110(left)->cond17
cond17(no)->op114
op114->sub116
sub116->op118
op118->sub120
sub120->op122
op122->sub124
sub124->op126
op126->op128
op128->cond131
cond131(yes)->cond182
cond182(yes)->cond200
cond200(yes)->op204
op204->sub206
cond200(no)->cond182
cond182(no)->cond214
cond214->op224
op224(left)->cond131
cond131(no)->op228
op228->sub230
sub230->op232
op232->op234
op234->sub236
sub236->op238
op238->op240
op240->op242
op242->op244
op244->cond247
cond247->sub259
sub259->op261
op261->sub263
sub263->op265
op265->sub267
sub267->op269
op269->op271
op271->op273
op273->op275
op275->sub277
sub277->cond280
cond280(yes)->sub284
sub284->sub286
sub286->e293
e293->st297
st297->io299
io299->op302
op302->op304
op304->cond307
cond307(yes)->op316
op316->op318
op318(left)->cond307
cond307(no)->io325
io325->e323
cond280(no)->sub290
sub290->e293

