op2=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op4=>operation: import numpy as np
op6=>operation: from egcd import egcd
op8=>operation: key1 = '3 10 20 20 19 17 23 78 17'
op10=>operation: inp = key1.split(' ')
op12=>operation: key = np.matrix([[int(inp[0]), int(inp[1]), int(inp[2])], [int(inp[3]), int(inp[4]), int(inp[5])], [int(inp[6]), int(inp[7]), int(inp[8])]])
op14=>operation: letter_to_index = dict(zip(alphabet, range(len(alphabet))))
op16=>operation: index_to_letter = dict(zip(range(len(alphabet)), alphabet))
st19=>start: start matrix_mod_inv
io21=>inputoutput: input: matrix, modulus
op24=>operation: det = int(np.round(np.linalg.det(matrix)))
op26=>operation: det_inv = (egcd(det, modulus)[1] % modulus)
op28=>operation: matrix_modulus_inv = ((det_inv * np.round((det * np.linalg.inv(matrix))).astype(int)) % modulus)
io33=>inputoutput: output:  matrix_modulus_inv
e31=>end: end function return

op2->op4
op4->op6
op6->op8
op8->op10
op10->op12
op12->op14
op14->op16
op16->st19
st19->io21
io21->op24
op24->op26
op26->op28
op28->io33
io33->e31

