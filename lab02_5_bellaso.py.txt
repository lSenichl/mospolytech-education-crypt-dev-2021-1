op2=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op4=>operation: key = 'ключ'
st7=>start: start bellaso_decode
io9=>inputoutput: input: input, key
op12=>operation: decrypted = ''
op14=>operation: offset = 0
cond17=>condition: for ix in range(len(input))
cond49=>condition: if (input[ix] not in alphabet)
op53=>operation: output = input[ix]
op55=>operation: offset += (- 1)
op72=>operation: decrypted += output
cond60=>condition: if (alphabet.find(input[ix]) > ((len(alphabet) - alphabet.find(key[((ix + offset) % len(key))])) - 1))
op64=>operation: output = alphabet[((alphabet.find(input[ix]) - alphabet.find(key[((ix + offset) % len(key))])) % 33)]
op68=>operation: output = alphabet[(alphabet.find(input[ix]) - alphabet.find(key[((ix + offset) % len(key))]))]
io79=>inputoutput: output:  decrypted
e77=>end: end function return

op2->op4
op4->st7
st7->io9
io9->op12
op12->op14
op14->cond17
cond17(yes)->cond49
cond49(yes)->op53
op53->op55
op55->op72
op72(left)->cond17
cond49(no)->cond60
cond60(yes)->op64
op64->op72
cond60(no)->op68
op68->op72
cond17(no)->io79
io79->e77

