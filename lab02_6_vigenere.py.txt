op2=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op4=>operation: key = 'ключ'
st7=>start: start vigenere_encode
io9=>inputoutput: input: input, key
op12=>operation: enc_string = ''
op14=>operation: string_length = len(input)
op16=>operation: expanded_key = key
op18=>operation: expanded_key_length = len(expanded_key)
cond21=>condition: while (expanded_key_length < string_length)
op30=>operation: expanded_key = (expanded_key + key)
op32=>operation: expanded_key_length = len(expanded_key)
op36=>operation: key_position = 0
cond39=>condition: for letter in input
cond80=>condition: if (letter in alphabet)
op84=>operation: position = alphabet.find(letter)
op86=>operation: key_character = expanded_key[key_position]
op88=>operation: key_character_position = alphabet.find(key_character)
op90=>operation: key_position = (key_position + 1)
op92=>operation: new_position = (position + key_character_position)
cond95=>operation: new_position = (new_position - 33) if  (new_position >= 33)
op105=>operation: new_character = alphabet[new_position]
op107=>operation: enc_string = (enc_string + new_character)
op111=>operation: enc_string = (enc_string + letter)
io119=>inputoutput: output:  enc_string
e117=>end: end function return

op2->op4
op4->st7
st7->io9
io9->op12
op12->op14
op14->op16
op16->op18
op18->cond21
cond21(yes)->op30
op30->op32
op32(left)->cond21
cond21(no)->op36
op36->cond39
cond39(yes)->cond80
cond80(yes)->op84
op84->op86
op86->op88
op88->op90
op90->op92
op92->cond95
cond95->op105
op105->op107
op107->cond39
cond80(no)->op111
op111->cond39
cond39(no)->io119
io119->e117

