op2=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op4=>operation: class Cardan(object):

    def __init__(self, size, spaces):
        self.size = int(size)
        str1 = ''
        for i in range(len(spaces)):
            str1 = ((str1 + str(spaces[i][0])) + str(spaces[i][1]))
        self.spaces = str1
        matrix_spaces = []
        i = 0
        cont = 0
        while (i < ((self.size * self.size) // 4)):
            t = (int(self.spaces[cont]), int(self.spaces[(cont + 1)]))
            cont = (cont + 2)
            i = (i + 1)
            matrix_spaces.append(t)
        self.spaces = matrix_spaces

    def code(self, message):
        offset = 0
        cipher_text = ''
        matrix = []
        for i in range(((self.size * 2) - 1)):
            matrix.append([])
            for j in range(self.size):
                matrix[i].append(None)
        whitesneeded = ((self.size * self.size) - (len(message) % (self.size * self.size)))
        if ((len(message) % (self.size * self.size)) != 0):
            for h in range(whitesneeded):
                message = (message + ' ')
        while (offset < len(message)):
            self.spaces.sort()
            for i in range(int(((self.size * self.size) // 4))):
                xy = self.spaces[i]
                x = xy[0]
                y = xy[1]
                matrix[x][y] = message[offset]
                offset = (offset + 1)
            if ((offset % (self.size * self.size)) == 0):
                for i in range(self.size):
                    for j in range(self.size):
                        try:
                            cipher_text = (cipher_text + matrix[i][j])
                        except:
                            pass
            for i in range(((self.size * self.size) // 4)):
                x = ((self.size - 1) - self.spaces[i][1])
                y = self.spaces[i][0]
                self.spaces[i] = (x, y)
        return cipher_text

    def decode(self, message, size):
        uncipher_text = ''
        offset = 0
        matrix = []
        for i in range(((self.size * 2) - 1)):
            matrix.append([])
            for j in range(self.size):
                matrix[i].append(None)
        whitesneeded = ((self.size * self.size) - (len(message) % (self.size * self.size)))
        if ((len(message) % (self.size * self.size)) != 0):
            for h in range(whitesneeded):
                message = (message + ' ')
        offsetmsg = (len(message) - 1)
        while (offset < len(message)):
            if ((offset % (self.size * self.size)) == 0):
                for i in reversed(list(range(self.size))):
                    for j in reversed(list(range(self.size))):
                        matrix[i][j] = message[offsetmsg]
                        offsetmsg = (offsetmsg - 1)
            for i in reversed(list(range(((self.size * self.size) // 4)))):
                x = self.spaces[i][1]
                y = ((self.size - 1) - self.spaces[i][0])
                self.spaces[i] = (x, y)
            self.spaces.sort(reverse=True)
            for i in range(((self.size * self.size) // 4)):
                xy = self.spaces[i]
                x = xy[0]
                y = xy[1]
                uncipher_text = (matrix[x][y] + uncipher_text)
                offset = (offset + 1)
        return uncipher_text
op6=>operation: gaps = [(7, 7), (6, 0), (5, 0), (4, 0), (7, 1), (1, 1), (1, 2), (4, 1), (7, 2), (2, 1), (2, 5), (2, 3), (7, 3), (3, 1), (3, 2), (3, 4)]
op8=>operation: r = Cardan(8, gaps)
op10=>operation: texto = input_for_cipher_short()
op12=>operation: n = len(texto)
op14=>operation: encoded = r.code(texto)
op16=>operation: decoded = r.decode(encoded, n)
op18=>operation: gaps2 = [(7, 7), (6, 0), (5, 0), (4, 0), (7, 1), (1, 1), (1, 2), (4, 1), (7, 2), (2, 1), (2, 5), (2, 3), (7, 3), (3, 1), (3, 2), (3, 4)]
op20=>operation: r2 = Cardan(8, gaps)
op22=>operation: texto_long = input_for_cipher_long()
op24=>operation: n = len(texto_long)
op26=>operation: encoded_long = r2.code(texto_long)
op28=>operation: decoded_long = r2.decode(encoded_long, n)
st31=>start: start main
io33=>inputoutput: input: 
sub36=>subroutine: print(f'''
    Решетка Кардано:
    Ключ: {gaps}
    КОРОТКИЙ ТЕКСТ:
    Зашифрованный текст:
    {encoded.replace(' ', '')}
    
    Расшифрованный текст:
    {output_from_decrypted(decoded)}
    
    ДЛИННЫЙ ТЕКСТ:
    Зашифрованный текст:
    {encoded_long}
    
    Расшифрованный текст:
    {output_from_decrypted(decoded_long)}
    ''')
e38=>end: end main
cond42=>operation: main() if  (__name__ == '__main__')

op2->op4
op4->op6
op6->op8
op8->op10
op10->op12
op12->op14
op14->op16
op16->op18
op18->op20
op20->op22
op22->op24
op24->op26
op26->op28
op28->st31
st31->io33
io33->sub36
sub36->e38
e38->cond42

