op2=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op4=>operation: import math
op6=>operation: key = 'ключ'
st9=>start: start transposition_encode
io11=>inputoutput: input: msg, key
op14=>operation: cipher = ''
op16=>operation: k_indx = 0
op18=>operation: msg_len = float(len(msg))
op20=>operation: msg_lst = list(msg)
op22=>operation: key_lst = sorted(list(key))
op24=>operation: col = len(key)
op26=>operation: row = int(math.ceil((msg_len / col)))
op28=>operation: fill_null = int(((row * col) - msg_len))
sub30=>subroutine: msg_lst.extend(('_' * fill_null))
op32=>operation: matrix = [msg_lst[i:(i + col)] for i in range(0, len(msg_lst), col)]
cond35=>condition: for _ in range(col)
op46=>operation: curr_idx = key.index(key_lst[k_indx])
op48=>operation: cipher += ''.join([row[curr_idx] for row in matrix])
op50=>operation: k_indx += 1
io57=>inputoutput: output:  cipher
e55=>end: end function return

op2->op4
op4->op6
op6->st9
st9->io11
io11->op14
op14->op16
op16->op18
op18->op20
op20->op22
op22->op24
op24->op26
op26->op28
op28->sub30
sub30->op32
op32->cond35
cond35(yes)->op46
op46->op48
op48->op50
op50(left)->cond35
cond35(no)->io57
io57->e55

