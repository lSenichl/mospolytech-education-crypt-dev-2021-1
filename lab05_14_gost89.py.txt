op2=>operation: import sys
op4=>operation: import numpy.random
op6=>operation: import itertools
op8=>operation: from base import alphabet, input_for_cipher_short, input_for_cipher_long, output_from_decrypted
op10=>operation: import binascii
op12=>operation: class GostCrypt(object):

    def __init__(self, key, sbox):
        self._key = None
        self._subkeys = None
        self.key = key
        self.sbox = sbox

    @staticmethod
    def _bit_length(value):
        return len(bin(value)[2:])

    @property
    def key(self):
        return self._key

    @key.setter
    def key(self, key):
        self._key = key
        self._subkeys = [((key >> (32 * i)) & 4294967295) for i in range(8)]

    def _f(self, part, key):
        temp = (part ^ key)
        output = 0
        for i in range(8):
            output |= (self.sbox[i][((temp >> (4 * i)) & 15)] << (4 * i))
        return (((output >> 11) | (output << (32 - 11))) & 4294967295)

    def _decrypt_round(self, left_part, right_part, round_key):
        return (left_part, (right_part ^ self._f(left_part, round_key)))

    def encrypt(self, plain_msg):

        def _encrypt_round(left_part, right_part, round_key):
            return (right_part, (left_part ^ self._f(right_part, round_key)))
        left_part = (plain_msg >> 32)
        right_part = (plain_msg & 4294967295)
        for i in range(24):
            (left_part, right_part) = _encrypt_round(left_part, right_part, self._subkeys[(i % 8)])
        for i in range(8):
            (left_part, right_part) = _encrypt_round(left_part, right_part, self._subkeys[(7 - i)])
        return ((left_part << 32) | right_part)

    def decrypt(self, crypted_msg):

        def _decrypt_round(left_part, right_part, round_key):
            return ((right_part ^ self._f(left_part, round_key)), left_part)
        left_part = (crypted_msg >> 32)
        right_part = (crypted_msg & 4294967295)
        for i in range(8):
            (left_part, right_part) = _decrypt_round(left_part, right_part, self._subkeys[i])
        for i in range(24):
            (left_part, right_part) = _decrypt_round(left_part, right_part, self._subkeys[((7 - i) % 8)])
        return ((left_part << 32) | right_part)
op14=>operation: sbox = [numpy.random.permutation(l) for l in itertools.repeat(list(range(16)), 8)]
op16=>operation: sbox = ((4, 10, 9, 2, 13, 8, 0, 14, 6, 11, 1, 12, 7, 15, 5, 3), (14, 11, 4, 12, 6, 13, 15, 10, 2, 3, 8, 1, 0, 7, 5, 9), (5, 8, 1, 13, 10, 3, 4, 2, 14, 15, 12, 7, 6, 0, 9, 11), (7, 13, 10, 1, 0, 8, 9, 15, 14, 4, 6, 12, 11, 2, 5, 3), (6, 12, 7, 1, 5, 15, 13, 8, 4, 10, 9, 14, 0, 3, 11, 2), (4, 11, 10, 0, 7, 2, 1, 13, 3, 6, 8, 5, 9, 12, 15, 14), (13, 11, 4, 1, 3, 15, 5, 9, 0, 10, 14, 7, 6, 8, 2, 12), (1, 15, 13, 0, 5, 7, 10, 4, 9, 2, 3, 14, 6, 11, 8, 12))
op18=>operation: key = 18318279387912387912789378912379821879387978238793278872378329832982398023031
op20=>operation: text_short = input_for_cipher_short().encode().hex()
op22=>operation: text_short = int(text_short, 16)
op24=>operation: gost_short = GostCrypt(key, sbox)
op26=>operation: encode_text_short = gost_short.encrypt(text_short)
op28=>operation: decode_text_short = gost_short.decrypt(encode_text_short)
op30=>operation: decode_text_short = bytes.fromhex(hex(decode_text_short)[2:]).decode('utf-8')
op32=>operation: text_long = input_for_cipher_long().encode().hex()
op34=>operation: text_long = int(text_long, 16)
op36=>operation: gost_long = GostCrypt(key, sbox)
op38=>operation: encode_text_long = gost_long.encrypt(text_long)
op40=>operation: decode_text_long = gost_long.decrypt(encode_text_long)
op42=>operation: decode_text_long = bytes.fromhex(hex(decode_text_long)[2:]).decode('utf-8')
st45=>start: start main
io47=>inputoutput: input: 
sub50=>subroutine: print(f'''
    Гост 28147-89:
    Ключ: {key}
    КОРОТКИЙ ТЕКСТ:
    Зашифрованный текст:
    {encode_text_short}
    
    Расшифрованный текст:
    {output_from_decrypted(decode_text_short)}
    
    ДЛИННЫЙ ТЕКСТ:
    Зашифрованный текст:
    {encode_text_long}
    
    Расшифрованный текст:
    {output_from_decrypted(decode_text_long)}
    ''')
e52=>end: end main
cond56=>operation: main() if  (__name__ == '__main__')

op2->op4
op4->op6
op6->op8
op8->op10
op10->op12
op12->op14
op14->op16
op16->op18
op18->op20
op20->op22
op22->op24
op24->op26
op26->op28
op28->op30
op30->op32
op32->op34
op34->op36
op36->op38
op38->op40
op40->op42
op42->st45
st45->io47
io47->sub50
sub50->e52
e52->cond56

